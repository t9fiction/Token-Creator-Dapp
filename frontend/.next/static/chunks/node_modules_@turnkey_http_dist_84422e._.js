(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@turnkey_http_dist_84422e._.js", {

"[project]/node_modules/@turnkey/http/dist/universal.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fetch": (()=>fetch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cross$2d$fetch$2f$dist$2f$browser$2d$ponyfill$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/cross-fetch/dist/browser-ponyfill.js [app-client] (ecmascript)");
;
/// <reference lib="dom" />
// This is useful for mocking fetch in tests.
const fetch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cross$2d$fetch$2f$dist$2f$browser$2d$ponyfill$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fetch"];
;
 //# sourceMappingURL=universal.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/config.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "browserInit": (()=>browserInit),
    "getBrowserConfig": (()=>getBrowserConfig),
    "getConfig": (()=>getConfig),
    "init": (()=>init)
});
const config = {
    apiPublicKey: null,
    apiPrivateKey: null,
    baseUrl: null
};
const browserConfig = {
    baseUrl: null
};
/**
 * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.
 */ function browserInit(value) {
    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, "baseUrl");
}
/**
 * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.
 */ function init(value) {
    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, "apiPublicKey");
    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, "apiPrivateKey");
    config.baseUrl = assertNonEmptyString(value.baseUrl, "baseUrl");
}
function getConfig() {
    return {
        apiPublicKey: assertNonEmptyString(config.apiPublicKey, "apiPublicKey"),
        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, "apiPrivateKey"),
        baseUrl: assertNonEmptyString(config.baseUrl, "baseUrl")
    };
}
function getBrowserConfig() {
    return {
        baseUrl: assertNonEmptyString(browserConfig.baseUrl, "baseUrl")
    };
}
function assertNonEmptyString(input, name) {
    if (typeof input !== "string" || !input) {
        throw new Error(`"${name}" must be a non-empty string`);
    }
    return input;
}
;
 //# sourceMappingURL=config.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "bufferToBase64url": (()=>bufferToBase64url)
});
function bufferToBase64url(buffer) {
    // Buffer to binary string
    const byteView = new Uint8Array(buffer);
    let str = "";
    for (const charCode of byteView){
        str += String.fromCharCode(charCode);
    }
    // Binary string to base64
    const base64String = btoa(str);
    // Base64 to base64url
    // We assume that the base64url string is well-formed.
    const base64urlString = base64String.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
    return base64urlString;
}
;
 //# sourceMappingURL=base64url.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// We export these values in order so that they can be used to deduplicate
// schema definitions in minified JS code.
// TODO: Parcel isn't deduplicating these values.
__turbopack_esm__({
    "convert": (()=>convert),
    "convertValue": (()=>convertValue),
    "copyValue": (()=>copyValue),
    "derived": (()=>derived),
    "optional": (()=>optional),
    "required": (()=>required)
});
const copyValue = "copy";
const convertValue = "convert";
function convert(conversionFn, schema, input) {
    if (schema === copyValue) {
        return input;
    }
    if (schema === convertValue) {
        return conversionFn(input);
    }
    if (schema instanceof Array) {
        return input.map((v)=>convert(conversionFn, schema[0], v));
    }
    if (schema instanceof Object) {
        const output = {};
        for (const [key, schemaField] of Object.entries(schema)){
            if (schemaField.derive) {
                const v = schemaField.derive(input);
                if (v !== undefined) {
                    input[key] = v;
                }
            }
            if (!(key in input)) {
                if (schemaField.required) {
                    throw new Error(`Missing key: ${key}`);
                }
                continue;
            }
            // Fields can be null (rather than missing or `undefined`), e.g. the
            // `userHandle` field of the `AuthenticatorAssertionResponse`:
            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse
            if (input[key] == null) {
                output[key] = null;
                continue;
            }
            output[key] = convert(conversionFn, schemaField.schema, input[key]);
        }
        return output;
    }
}
function derived(schema, derive) {
    return {
        required: true,
        schema,
        derive
    };
}
function required(schema) {
    return {
        required: true,
        schema
    };
}
function optional(schema) {
    return {
        required: false,
        schema
    };
}
;
 //# sourceMappingURL=convert.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "publicKeyCredentialWithAssertion": (()=>publicKeyCredentialWithAssertion),
    "publicKeyCredentialWithAttestation": (()=>publicKeyCredentialWithAttestation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs [app-client] (ecmascript)");
;
const simplifiedClientExtensionResultsSchema = {
    appid: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    appidExclude: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    credProps: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"])
};
// `navigator.create()` response
const publicKeyCredentialWithAttestation = {
    type: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    rawId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
    authenticatorAttachment: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    response: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])({
        clientDataJSON: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
        attestationObject: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
        transports: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derived"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"], (response)=>response.getTransports?.() || [])
    }),
    clientExtensionResults: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derived"])(simplifiedClientExtensionResultsSchema, (pkc)=>pkc.getClientExtensionResults())
};
// `navigator.get()` response
const publicKeyCredentialWithAssertion = {
    type: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    rawId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
    authenticatorAttachment: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyValue"]),
    response: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])({
        clientDataJSON: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
        authenticatorData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
        signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"]),
        userHandle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["required"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertValue"])
    }),
    clientExtensionResults: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derived"])(simplifiedClientExtensionResultsSchema, (pkc)=>pkc.getClientExtensionResults())
};
;
 //# sourceMappingURL=schema.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn-json/api.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createResponseToJSON": (()=>createResponseToJSON),
    "getResponseToJSON": (()=>getResponseToJSON)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$base64url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$schema$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs [app-client] (ecmascript)");
;
;
;
function createResponseToJSON(credential) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convert"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$base64url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufferToBase64url"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$schema$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["publicKeyCredentialWithAttestation"], credential);
}
function getResponseToJSON(credential) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$convert$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convert"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$base64url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bufferToBase64url"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$schema$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["publicKeyCredentialWithAssertion"], credential);
}
;
 //# sourceMappingURL=api.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn-json/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "create": (()=>create),
    "get": (()=>get)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$api$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/api.mjs [app-client] (ecmascript)");
;
async function create(options) {
    const response = await navigator.credentials.create(options);
    response.toJSON = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$api$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createResponseToJSON"])(response);
    return response;
}
async function get(options) {
    const response = await navigator.credentials.get(options);
    response.toJSON = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$api$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getResponseToJSON"])(response);
    return response;
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/webauthn.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getWebAuthnAssertion": (()=>getWebAuthnAssertion),
    "getWebAuthnAttestation": (()=>getWebAuthnAttestation),
    "protocolTransportEnumToInternalEnum": (()=>protocolTransportEnumToInternalEnum)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn-json/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
;
const defaultTimeout = 5 * 60 * 1000; // five minutes
const defaultUserVerification = "preferred";
const defaultSigningOptions = {
    publicKey: {
        timeout: defaultTimeout,
        userVerification: defaultUserVerification
    }
};
async function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {
    const challenge = await getChallengeFromPayload(payload);
    const signingOptions = {
        ...tkSigningOptions,
        publicKey: {
            ...defaultSigningOptions.publicKey,
            ...tkSigningOptions.publicKey,
            challenge
        }
    };
    return signingOptions;
}
async function getChallengeFromPayload(payload) {
    const messageBuffer = new TextEncoder().encode(payload);
    const hashBuffer = await crypto.subtle.digest("SHA-256", messageBuffer);
    const hexString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(hashBuffer).toString("hex");
    const hexBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(hexString, "utf8");
    return new Uint8Array(hexBuffer);
}
/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */ function protocolTransportEnumToInternalEnum(protocolEnum) {
    switch(protocolEnum){
        case "internal":
            {
                return "AUTHENTICATOR_TRANSPORT_INTERNAL";
            }
        case "usb":
            {
                return "AUTHENTICATOR_TRANSPORT_USB";
            }
        case "nfc":
            {
                return "AUTHENTICATOR_TRANSPORT_NFC";
            }
        case "ble":
            {
                return "AUTHENTICATOR_TRANSPORT_BLE";
            }
        case "hybrid":
            {
                return "AUTHENTICATOR_TRANSPORT_HYBRID";
            }
        default:
            {
                throw new Error("unsupported transport format");
            }
    }
}
function toInternalAttestation(attestation) {
    return {
        credentialId: attestation.rawId,
        attestationObject: attestation.response.attestationObject,
        clientDataJson: attestation.response.clientDataJSON,
        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum)
    };
}
async function getWebAuthnAssertion(payload, options) {
    const webAuthnSupported = hasWebAuthnSupport();
    if (!webAuthnSupported) {
        throw new Error("webauthn is not supported by this browser");
    }
    const signingOptions = await getCredentialRequestOptions(payload, options);
    const clientGetResult = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["get"])(signingOptions);
    const assertion = clientGetResult.toJSON();
    const stamp = {
        authenticatorData: assertion.response.authenticatorData,
        clientDataJson: assertion.response.clientDataJSON,
        credentialId: assertion.id,
        signature: assertion.response.signature
    };
    return JSON.stringify(stamp);
}
async function getWebAuthnAttestation(options) {
    const webAuthnSupported = hasWebAuthnSupport();
    if (!webAuthnSupported) {
        throw new Error("webauthn is not supported by this browser");
    }
    const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2d$json$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["create"])(options);
    return toInternalAttestation(res.toJSON());
}
// `hasWebAuthnSupport` checks for barebones webauthn support.
// For additional details and granular settings, see:
// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential
function hasWebAuthnSupport() {
    return !!window.PublicKeyCredential;
}
;
 //# sourceMappingURL=webauthn.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TurnkeyRequestError": (()=>TurnkeyRequestError),
    "request": (()=>request),
    "sealAndStampRequestBody": (()=>sealAndStampRequestBody),
    "signedRequest": (()=>signedRequest)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$universal$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/universal.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/config.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/api-key-stamper/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/encoding/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
const sharedHeaders = {};
const sharedRequestOptions = {
    redirect: "follow"
};
/**
 * @deprecated
 */ async function signedRequest(input) {
    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {} } = input;
    const url = constructUrl({
        uri: inputUri,
        query: inputQuery,
        substitution: inputSubstitution
    });
    const body = JSON.stringify(inputBody);
    const stamp = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWebAuthnAssertion"])(body, input.options);
    return {
        url: url.toString(),
        body,
        stamp
    };
}
async function request(input) {
    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {} } = input;
    const url = constructUrl({
        uri: inputUri,
        query: inputQuery,
        substitution: inputSubstitution
    });
    const { sealedBody, xStamp } = await sealAndStampRequestBody({
        body: inputBody
    });
    const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$universal$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fetch"])(url.toString(), {
        ...sharedRequestOptions,
        method,
        headers: {
            ...sharedHeaders,
            ...inputHeaders,
            "X-Stamp": xStamp
        },
        body: sealedBody
    });
    if (!response.ok) {
        // Can't use native `cause` here because it's not well supported on Node v16
        // https://node.green/#ES2022-features-Error-cause-property
        let res;
        try {
            res = await response.json();
        } catch (_) {
            throw new Error(`${response.status} ${response.statusText}`);
        }
        throw new TurnkeyRequestError(res);
    }
    const data = await response.json();
    return data;
}
function constructUrl(input) {
    const { uri, query, substitution } = input;
    const baseUrl = getBaseUrl();
    const url = new URL(substitutePath(uri, substitution), baseUrl);
    for(const key in query){
        const value = query[key];
        if (Array.isArray(value)) {
            for (const item of value){
                url.searchParams.append(key, item);
            }
        } else {
            url.searchParams.append(key, value ?? "");
        }
    }
    return url;
}
function getBaseUrl() {
    try {
        const { baseUrl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getConfig"])();
        return baseUrl;
    } catch (e) {
        const { baseUrl } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBrowserConfig"])();
        return baseUrl;
    }
}
function substitutePath(uri, substitutionMap) {
    let result = uri;
    const keyList = Object.keys(substitutionMap);
    for (const key of keyList){
        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);
        invariant(output !== result, `Substitution error: cannot find "${key}" in URI "${uri}". \`substitutionMap\`: ${JSON.stringify(substitutionMap)}`);
        result = output;
    }
    invariant(!/\{.*\}/.test(result), `Substitution error: found unsubstituted components in "${result}"`);
    return result;
}
function invariant(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}
function stableStringify(input) {
    return JSON.stringify(input);
}
/**
 * Seals and stamps the request body with your Turnkey API credentials.
 *
 * You can either:
 * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`
 * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments
 */ async function sealAndStampRequestBody(input) {
    const { body } = input;
    let { apiPublicKey, apiPrivateKey } = input;
    if (!apiPublicKey) {
        const config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getConfig"])();
        apiPublicKey = config.apiPublicKey;
    }
    if (!apiPrivateKey) {
        const config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getConfig"])();
        apiPrivateKey = config.apiPrivateKey;
    }
    const sealedBody = stableStringify(body);
    const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signWithApiKey"])({
        content: sealedBody,
        privateKey: apiPrivateKey,
        publicKey: apiPublicKey
    });
    const sealedStamp = stableStringify({
        publicKey: apiPublicKey,
        scheme: "SIGNATURE_SCHEME_TK_API_P256",
        signature: signature
    });
    const xStamp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBase64urlString"])(sealedStamp);
    return {
        sealedBody,
        xStamp
    };
}
class TurnkeyRequestError extends Error {
    constructor(input){
        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;
        if (input.details != null) {
            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
        }
        super(turnkeyErrorMessage);
        this.name = "TurnkeyRequestError";
        this.details = input.details ?? null;
        this.code = input.code;
    }
}
;
 //# sourceMappingURL=base.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/api-key-stamper/dist/index.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$universal$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/universal.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/config.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/encoding/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "approveActivity": (()=>approveActivity),
    "createApiKeys": (()=>createApiKeys),
    "createApiOnlyUsers": (()=>createApiOnlyUsers),
    "createAuthenticators": (()=>createAuthenticators),
    "createInvitations": (()=>createInvitations),
    "createOauthProviders": (()=>createOauthProviders),
    "createPolicies": (()=>createPolicies),
    "createPolicy": (()=>createPolicy),
    "createPrivateKeyTag": (()=>createPrivateKeyTag),
    "createPrivateKeys": (()=>createPrivateKeys),
    "createReadOnlySession": (()=>createReadOnlySession),
    "createReadWriteSession": (()=>createReadWriteSession),
    "createSubOrganization": (()=>createSubOrganization),
    "createUserTag": (()=>createUserTag),
    "createUsers": (()=>createUsers),
    "createWallet": (()=>createWallet),
    "createWalletAccounts": (()=>createWalletAccounts),
    "deleteApiKeys": (()=>deleteApiKeys),
    "deleteAuthenticators": (()=>deleteAuthenticators),
    "deleteInvitation": (()=>deleteInvitation),
    "deleteOauthProviders": (()=>deleteOauthProviders),
    "deletePolicy": (()=>deletePolicy),
    "deletePrivateKeyTags": (()=>deletePrivateKeyTags),
    "deleteUserTags": (()=>deleteUserTags),
    "deleteUsers": (()=>deleteUsers),
    "emailAuth": (()=>emailAuth),
    "exportPrivateKey": (()=>exportPrivateKey),
    "exportWallet": (()=>exportWallet),
    "exportWalletAccount": (()=>exportWalletAccount),
    "getActivities": (()=>getActivities),
    "getActivity": (()=>getActivity),
    "getApiKey": (()=>getApiKey),
    "getApiKeys": (()=>getApiKeys),
    "getAttestationDocument": (()=>getAttestationDocument),
    "getAuthenticator": (()=>getAuthenticator),
    "getAuthenticators": (()=>getAuthenticators),
    "getOauthProviders": (()=>getOauthProviders),
    "getOrganization": (()=>getOrganization),
    "getOrganizationConfigs": (()=>getOrganizationConfigs),
    "getPolicies": (()=>getPolicies),
    "getPolicy": (()=>getPolicy),
    "getPrivateKey": (()=>getPrivateKey),
    "getPrivateKeys": (()=>getPrivateKeys),
    "getSubOrgIds": (()=>getSubOrgIds),
    "getUser": (()=>getUser),
    "getUsers": (()=>getUsers),
    "getWallet": (()=>getWallet),
    "getWalletAccounts": (()=>getWalletAccounts),
    "getWallets": (()=>getWallets),
    "getWhoami": (()=>getWhoami),
    "importPrivateKey": (()=>importPrivateKey),
    "importWallet": (()=>importWallet),
    "initImportPrivateKey": (()=>initImportPrivateKey),
    "initImportWallet": (()=>initImportWallet),
    "initUserEmailRecovery": (()=>initUserEmailRecovery),
    "listPrivateKeyTags": (()=>listPrivateKeyTags),
    "listUserTags": (()=>listUserTags),
    "nOOPCodegenAnchor": (()=>nOOPCodegenAnchor),
    "oauth": (()=>oauth),
    "recoverUser": (()=>recoverUser),
    "rejectActivity": (()=>rejectActivity),
    "removeOrganizationFeature": (()=>removeOrganizationFeature),
    "setOrganizationFeature": (()=>setOrganizationFeature),
    "signApproveActivity": (()=>signApproveActivity),
    "signCreateApiKeys": (()=>signCreateApiKeys),
    "signCreateApiOnlyUsers": (()=>signCreateApiOnlyUsers),
    "signCreateAuthenticators": (()=>signCreateAuthenticators),
    "signCreateInvitations": (()=>signCreateInvitations),
    "signCreateOauthProviders": (()=>signCreateOauthProviders),
    "signCreatePolicies": (()=>signCreatePolicies),
    "signCreatePolicy": (()=>signCreatePolicy),
    "signCreatePrivateKeyTag": (()=>signCreatePrivateKeyTag),
    "signCreatePrivateKeys": (()=>signCreatePrivateKeys),
    "signCreateReadOnlySession": (()=>signCreateReadOnlySession),
    "signCreateReadWriteSession": (()=>signCreateReadWriteSession),
    "signCreateSubOrganization": (()=>signCreateSubOrganization),
    "signCreateUserTag": (()=>signCreateUserTag),
    "signCreateUsers": (()=>signCreateUsers),
    "signCreateWallet": (()=>signCreateWallet),
    "signCreateWalletAccounts": (()=>signCreateWalletAccounts),
    "signDeleteApiKeys": (()=>signDeleteApiKeys),
    "signDeleteAuthenticators": (()=>signDeleteAuthenticators),
    "signDeleteInvitation": (()=>signDeleteInvitation),
    "signDeleteOauthProviders": (()=>signDeleteOauthProviders),
    "signDeletePolicy": (()=>signDeletePolicy),
    "signDeletePrivateKeyTags": (()=>signDeletePrivateKeyTags),
    "signDeleteUserTags": (()=>signDeleteUserTags),
    "signDeleteUsers": (()=>signDeleteUsers),
    "signEmailAuth": (()=>signEmailAuth),
    "signExportPrivateKey": (()=>signExportPrivateKey),
    "signExportWallet": (()=>signExportWallet),
    "signExportWalletAccount": (()=>signExportWalletAccount),
    "signGetActivities": (()=>signGetActivities),
    "signGetActivity": (()=>signGetActivity),
    "signGetApiKey": (()=>signGetApiKey),
    "signGetApiKeys": (()=>signGetApiKeys),
    "signGetAttestationDocument": (()=>signGetAttestationDocument),
    "signGetAuthenticator": (()=>signGetAuthenticator),
    "signGetAuthenticators": (()=>signGetAuthenticators),
    "signGetOauthProviders": (()=>signGetOauthProviders),
    "signGetOrganization": (()=>signGetOrganization),
    "signGetOrganizationConfigs": (()=>signGetOrganizationConfigs),
    "signGetPolicies": (()=>signGetPolicies),
    "signGetPolicy": (()=>signGetPolicy),
    "signGetPrivateKey": (()=>signGetPrivateKey),
    "signGetPrivateKeys": (()=>signGetPrivateKeys),
    "signGetSubOrgIds": (()=>signGetSubOrgIds),
    "signGetUser": (()=>signGetUser),
    "signGetUsers": (()=>signGetUsers),
    "signGetWallet": (()=>signGetWallet),
    "signGetWalletAccounts": (()=>signGetWalletAccounts),
    "signGetWallets": (()=>signGetWallets),
    "signGetWhoami": (()=>signGetWhoami),
    "signImportPrivateKey": (()=>signImportPrivateKey),
    "signImportWallet": (()=>signImportWallet),
    "signInitImportPrivateKey": (()=>signInitImportPrivateKey),
    "signInitImportWallet": (()=>signInitImportWallet),
    "signInitUserEmailRecovery": (()=>signInitUserEmailRecovery),
    "signListPrivateKeyTags": (()=>signListPrivateKeyTags),
    "signListUserTags": (()=>signListUserTags),
    "signNOOPCodegenAnchor": (()=>signNOOPCodegenAnchor),
    "signOauth": (()=>signOauth),
    "signRawPayload": (()=>signRawPayload),
    "signRawPayloads": (()=>signRawPayloads),
    "signRecoverUser": (()=>signRecoverUser),
    "signRejectActivity": (()=>signRejectActivity),
    "signRemoveOrganizationFeature": (()=>signRemoveOrganizationFeature),
    "signSetOrganizationFeature": (()=>signSetOrganizationFeature),
    "signSignRawPayload": (()=>signSignRawPayload),
    "signSignRawPayloads": (()=>signSignRawPayloads),
    "signSignTransaction": (()=>signSignTransaction),
    "signTransaction": (()=>signTransaction),
    "signUpdatePolicy": (()=>signUpdatePolicy),
    "signUpdatePrivateKeyTag": (()=>signUpdatePrivateKeyTag),
    "signUpdateRootQuorum": (()=>signUpdateRootQuorum),
    "signUpdateUser": (()=>signUpdateUser),
    "signUpdateUserTag": (()=>signUpdateUserTag),
    "updatePolicy": (()=>updatePolicy),
    "updatePrivateKeyTag": (()=>updatePrivateKeyTag),
    "updateRootQuorum": (()=>updateRootQuorum),
    "updateUser": (()=>updateUser),
    "updateUserTag": (()=>updateUserTag)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <locals>");
;
/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */ /**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */ const getActivity = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_activity",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */ const signGetActivity = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_activity",
        body: input.body,
        options
    });
/**
 * Get API key
 *
 * Get details about an API key
 *
 * `POST /public/v1/query/get_api_key`
 */ const getApiKey = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_api_key",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKey}
 */ const signGetApiKey = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_api_key",
        body: input.body,
        options
    });
/**
 * Get API key
 *
 * Get details about API keys for a user
 *
 * `POST /public/v1/query/get_api_keys`
 */ const getApiKeys = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_api_keys",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKeys}
 */ const signGetApiKeys = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_api_keys",
        body: input.body,
        options
    });
/**
 * Attestation
 *
 * Get the attestation document corresponding to an enclave.
 *
 * `POST /public/v1/query/get_attestation`
 */ const getAttestationDocument = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_attestation",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAttestationDocument}
 */ const signGetAttestationDocument = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_attestation",
        body: input.body,
        options
    });
/**
 * Get Authenticator
 *
 * Get details about an authenticator
 *
 * `POST /public/v1/query/get_authenticator`
 */ const getAuthenticator = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_authenticator",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */ const signGetAuthenticator = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_authenticator",
        body: input.body,
        options
    });
/**
 * Get Authenticators
 *
 * Get details about authenticators for a user
 *
 * `POST /public/v1/query/get_authenticators`
 */ const getAuthenticators = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_authenticators",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */ const signGetAuthenticators = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_authenticators",
        body: input.body,
        options
    });
/**
 * Get Oauth providers
 *
 * Get details about Oauth providers for a user
 *
 * `POST /public/v1/query/get_oauth_providers`
 */ const getOauthProviders = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_oauth_providers",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOauthProviders}
 */ const signGetOauthProviders = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_oauth_providers",
        body: input.body,
        options
    });
/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */ const getOrganization = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_organization",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */ const signGetOrganization = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_organization",
        body: input.body,
        options
    });
/**
 * Get Configs
 *
 * Get quorum settings and features for an organization
 *
 * `POST /public/v1/query/get_organization_configs`
 */ const getOrganizationConfigs = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_organization_configs",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganizationConfigs}
 */ const signGetOrganizationConfigs = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_organization_configs",
        body: input.body,
        options
    });
/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */ const getPolicy = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_policy",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */ const signGetPolicy = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_policy",
        body: input.body,
        options
    });
/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */ const getPrivateKey = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_private_key",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */ const signGetPrivateKey = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_private_key",
        body: input.body,
        options
    });
/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */ const getUser = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_user",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */ const signGetUser = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_user",
        body: input.body,
        options
    });
/**
 * Get Wallet
 *
 * Get details about a Wallet
 *
 * `POST /public/v1/query/get_wallet`
 */ const getWallet = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/get_wallet",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallet}
 */ const signGetWallet = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/get_wallet",
        body: input.body,
        options
    });
/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */ const getActivities = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_activities",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */ const signGetActivities = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_activities",
        body: input.body,
        options
    });
/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */ const getPolicies = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_policies",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */ const signGetPolicies = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_policies",
        body: input.body,
        options
    });
/**
 * List Private Key Tags
 *
 * List all Private Key Tags within an Organization
 *
 * `POST /public/v1/query/list_private_key_tags`
 */ const listPrivateKeyTags = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_private_key_tags",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListPrivateKeyTags}
 */ const signListPrivateKeyTags = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_private_key_tags",
        body: input.body,
        options
    });
/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */ const getPrivateKeys = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_private_keys",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */ const signGetPrivateKeys = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_private_keys",
        body: input.body,
        options
    });
/**
 * Get Suborgs
 *
 * Get all suborg IDs associated given a parent org ID and an optional filter.
 *
 * `POST /public/v1/query/list_suborgs`
 */ const getSubOrgIds = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_suborgs",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSubOrgIds}
 */ const signGetSubOrgIds = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_suborgs",
        body: input.body,
        options
    });
/**
 * List User Tags
 *
 * List all User Tags within an Organization
 *
 * `POST /public/v1/query/list_user_tags`
 */ const listUserTags = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_user_tags",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListUserTags}
 */ const signListUserTags = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_user_tags",
        body: input.body,
        options
    });
/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */ const getUsers = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_users",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */ const signGetUsers = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_users",
        body: input.body,
        options
    });
/**
 * List Wallets Accounts
 *
 * List all Accounts wirhin a Wallet
 *
 * `POST /public/v1/query/list_wallet_accounts`
 */ const getWalletAccounts = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_wallet_accounts",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccounts}
 */ const signGetWalletAccounts = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_wallet_accounts",
        body: input.body,
        options
    });
/**
 * List Wallets
 *
 * List all Wallets within an Organization
 *
 * `POST /public/v1/query/list_wallets`
 */ const getWallets = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/list_wallets",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallets}
 */ const signGetWallets = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/list_wallets",
        body: input.body,
        options
    });
/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
 *
 * `POST /public/v1/query/whoami`
 */ const getWhoami = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/query/whoami",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */ const signGetWhoami = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/query/whoami",
        body: input.body,
        options
    });
/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */ const approveActivity = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/approve_activity",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */ const signApproveActivity = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/approve_activity",
        body: input.body,
        options
    });
/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */ const createApiKeys = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_api_keys",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */ const signCreateApiKeys = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_api_keys",
        body: input.body,
        options
    });
/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */ const createApiOnlyUsers = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_api_only_users",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */ const signCreateApiOnlyUsers = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_api_only_users",
        body: input.body,
        options
    });
/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */ const createAuthenticators = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_authenticators",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */ const signCreateAuthenticators = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_authenticators",
        body: input.body,
        options
    });
/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */ const createInvitations = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_invitations",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */ const signCreateInvitations = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_invitations",
        body: input.body,
        options
    });
/**
 * Create Oauth Providers
 *
 * Creates Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/create_oauth_providers`
 */ const createOauthProviders = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_oauth_providers",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateOauthProviders}
 */ const signCreateOauthProviders = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_oauth_providers",
        body: input.body,
        options
    });
/**
 * Create Policies
 *
 * Create new Policies
 *
 * `POST /public/v1/submit/create_policies`
 */ const createPolicies = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_policies",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicies}
 */ const signCreatePolicies = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_policies",
        body: input.body,
        options
    });
/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */ const createPolicy = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_policy",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */ const signCreatePolicy = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_policy",
        body: input.body,
        options
    });
/**
 * Create Private Key Tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */ const createPrivateKeyTag = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_private_key_tag",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */ const signCreatePrivateKeyTag = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_private_key_tag",
        body: input.body,
        options
    });
/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */ const createPrivateKeys = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_private_keys",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */ const signCreatePrivateKeys = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_private_keys",
        body: input.body,
        options
    });
/**
 * Create Read Only Session
 *
 * Create a read only session for a user (valid for 1 hour)
 *
 * `POST /public/v1/submit/create_read_only_session`
 */ const createReadOnlySession = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_read_only_session",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadOnlySession}
 */ const signCreateReadOnlySession = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_read_only_session",
        body: input.body,
        options
    });
/**
 * Create Read Write Session
 *
 * Create a read write session for a user
 *
 * `POST /public/v1/submit/create_read_write_session`
 */ const createReadWriteSession = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_read_write_session",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadWriteSession}
 */ const signCreateReadWriteSession = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_read_write_session",
        body: input.body,
        options
    });
/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */ const createSubOrganization = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_sub_organization",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */ const signCreateSubOrganization = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_sub_organization",
        body: input.body,
        options
    });
/**
 * Create User Tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */ const createUserTag = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_user_tag",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */ const signCreateUserTag = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_user_tag",
        body: input.body,
        options
    });
/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 */ const createUsers = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_users",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */ const signCreateUsers = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_users",
        body: input.body,
        options
    });
/**
 * Create Wallet
 *
 * Create a Wallet and derive addresses
 *
 * `POST /public/v1/submit/create_wallet`
 */ const createWallet = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_wallet",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWallet}
 */ const signCreateWallet = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_wallet",
        body: input.body,
        options
    });
/**
 * Create Wallet Accounts
 *
 * Derive additional addresses using an existing wallet
 *
 * `POST /public/v1/submit/create_wallet_accounts`
 */ const createWalletAccounts = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/create_wallet_accounts",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWalletAccounts}
 */ const signCreateWalletAccounts = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/create_wallet_accounts",
        body: input.body,
        options
    });
/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */ const deleteApiKeys = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_api_keys",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */ const signDeleteApiKeys = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_api_keys",
        body: input.body,
        options
    });
/**
 * Delete Authenticators
 *
 * Remove authenticators from a User
 *
 * `POST /public/v1/submit/delete_authenticators`
 */ const deleteAuthenticators = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_authenticators",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */ const signDeleteAuthenticators = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_authenticators",
        body: input.body,
        options
    });
/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitation`
 */ const deleteInvitation = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_invitation",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */ const signDeleteInvitation = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_invitation",
        body: input.body,
        options
    });
/**
 * Delete Oauth Providers
 *
 * Removes Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/delete_oauth_providers`
 */ const deleteOauthProviders = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_oauth_providers",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteOauthProviders}
 */ const signDeleteOauthProviders = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_oauth_providers",
        body: input.body,
        options
    });
/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */ const deletePolicy = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_policy",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */ const signDeletePolicy = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_policy",
        body: input.body,
        options
    });
/**
 * Delete Private Key Tags
 *
 * Delete Private Key Tags within an Organization
 *
 * `POST /public/v1/submit/delete_private_key_tags`
 */ const deletePrivateKeyTags = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_private_key_tags",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeyTags}
 */ const signDeletePrivateKeyTags = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_private_key_tags",
        body: input.body,
        options
    });
/**
 * Delete User Tags
 *
 * Delete User Tags within an Organization
 *
 * `POST /public/v1/submit/delete_user_tags`
 */ const deleteUserTags = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_user_tags",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUserTags}
 */ const signDeleteUserTags = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_user_tags",
        body: input.body,
        options
    });
/**
 * Delete Users
 *
 * Delete Users within an Organization
 *
 * `POST /public/v1/submit/delete_users`
 */ const deleteUsers = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/delete_users",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUsers}
 */ const signDeleteUsers = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/delete_users",
        body: input.body,
        options
    });
/**
 * Perform Email Auth
 *
 * Authenticate a user via Email
 *
 * `POST /public/v1/submit/email_auth`
 */ const emailAuth = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/email_auth",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link EmailAuth}
 */ const signEmailAuth = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/email_auth",
        body: input.body,
        options
    });
/**
 * Export Private Key
 *
 * Exports a Private Key
 *
 * `POST /public/v1/submit/export_private_key`
 */ const exportPrivateKey = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/export_private_key",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportPrivateKey}
 */ const signExportPrivateKey = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/export_private_key",
        body: input.body,
        options
    });
/**
 * Export Wallet
 *
 * Exports a Wallet
 *
 * `POST /public/v1/submit/export_wallet`
 */ const exportWallet = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/export_wallet",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWallet}
 */ const signExportWallet = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/export_wallet",
        body: input.body,
        options
    });
/**
 * Export Wallet Account
 *
 * Exports a Wallet Account
 *
 * `POST /public/v1/submit/export_wallet_account`
 */ const exportWalletAccount = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/export_wallet_account",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWalletAccount}
 */ const signExportWalletAccount = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/export_wallet_account",
        body: input.body,
        options
    });
/**
 * Import Private Key
 *
 * Imports a private key
 *
 * `POST /public/v1/submit/import_private_key`
 */ const importPrivateKey = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/import_private_key",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportPrivateKey}
 */ const signImportPrivateKey = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/import_private_key",
        body: input.body,
        options
    });
/**
 * Import Wallet
 *
 * Imports a wallet
 *
 * `POST /public/v1/submit/import_wallet`
 */ const importWallet = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/import_wallet",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportWallet}
 */ const signImportWallet = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/import_wallet",
        body: input.body,
        options
    });
/**
 * Init Import Private Key
 *
 * Initializes a new private key import
 *
 * `POST /public/v1/submit/init_import_private_key`
 */ const initImportPrivateKey = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/init_import_private_key",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportPrivateKey}
 */ const signInitImportPrivateKey = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/init_import_private_key",
        body: input.body,
        options
    });
/**
 * Init Import Wallet
 *
 * Initializes a new wallet import
 *
 * `POST /public/v1/submit/init_import_wallet`
 */ const initImportWallet = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/init_import_wallet",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportWallet}
 */ const signInitImportWallet = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/init_import_wallet",
        body: input.body,
        options
    });
/**
 * Init Email Recovery
 *
 * Initializes a new email recovery
 *
 * `POST /public/v1/submit/init_user_email_recovery`
 */ const initUserEmailRecovery = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/init_user_email_recovery",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitUserEmailRecovery}
 */ const signInitUserEmailRecovery = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/init_user_email_recovery",
        body: input.body,
        options
    });
/**
 * Oauth
 *
 * Authenticate a user with an Oidc token (Oauth) - BETA
 *
 * `POST /public/v1/submit/oauth`
 */ const oauth = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/oauth",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.
 *
 * See {@link Oauth}
 */ const signOauth = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/oauth",
        body: input.body,
        options
    });
/**
 * Recover a user
 *
 * Completes the process of recovering a user by adding an authenticator
 *
 * `POST /public/v1/submit/recover_user`
 */ const recoverUser = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/recover_user",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link RecoverUser}
 */ const signRecoverUser = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/recover_user",
        body: input.body,
        options
    });
/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */ const rejectActivity = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/reject_activity",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */ const signRejectActivity = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/reject_activity",
        body: input.body,
        options
    });
/**
 * Remove Organization Feature
 *
 * Removes an organization feature
 *
 * `POST /public/v1/submit/remove_organization_feature`
 */ const removeOrganizationFeature = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/remove_organization_feature",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link RemoveOrganizationFeature}
 */ const signRemoveOrganizationFeature = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/remove_organization_feature",
        body: input.body,
        options
    });
/**
 * Set Organization Feature
 *
 * Sets an organization feature
 *
 * `POST /public/v1/submit/set_organization_feature`
 */ const setOrganizationFeature = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/set_organization_feature",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link SetOrganizationFeature}
 */ const signSetOrganizationFeature = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/set_organization_feature",
        body: input.body,
        options
    });
/**
 * Sign Raw Payload
 *
 * Sign a raw payload
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */ const signRawPayload = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/sign_raw_payload",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */ const signSignRawPayload = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/sign_raw_payload",
        body: input.body,
        options
    });
/**
 * Sign Raw Payloads
 *
 * Sign multiple raw payloads with the same signing parameters
 *
 * `POST /public/v1/submit/sign_raw_payloads`
 */ const signRawPayloads = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/sign_raw_payloads",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayloads}
 */ const signSignRawPayloads = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/sign_raw_payloads",
        body: input.body,
        options
    });
/**
 * Sign Transaction
 *
 * Sign a transaction
 *
 * `POST /public/v1/submit/sign_transaction`
 */ const signTransaction = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/sign_transaction",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */ const signSignTransaction = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/sign_transaction",
        body: input.body,
        options
    });
/**
 * Update Policy
 *
 * Update an existing Policy
 *
 * `POST /public/v1/submit/update_policy`
 */ const updatePolicy = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/update_policy",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */ const signUpdatePolicy = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/update_policy",
        body: input.body,
        options
    });
/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */ const updatePrivateKeyTag = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/update_private_key_tag",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */ const signUpdatePrivateKeyTag = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/update_private_key_tag",
        body: input.body,
        options
    });
/**
 * Update Root Quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */ const updateRootQuorum = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/update_root_quorum",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */ const signUpdateRootQuorum = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/update_root_quorum",
        body: input.body,
        options
    });
/**
 * Update User
 *
 * Update a User in an existing Organization
 *
 * `POST /public/v1/submit/update_user`
 */ const updateUser = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/update_user",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */ const signUpdateUser = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/update_user",
        body: input.body,
        options
    });
/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */ const updateUserTag = (input)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/public/v1/submit/update_user_tag",
        method: "POST",
        body: input.body
    });
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */ const signUpdateUserTag = (input, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/public/v1/submit/update_user_tag",
        body: input.body,
        options
    });
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */ const nOOPCodegenAnchor = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["request"])({
        uri: "/tkhq/api/v1/noop-codegen-anchor",
        method: "POST"
    });
/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */ const signNOOPCodegenAnchor = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signedRequest"])({
        uri: "/tkhq/api/v1/noop-codegen-anchor"
    });
;
 //# sourceMappingURL=public_api.fetcher.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/version.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "VERSION": (()=>VERSION)
});
const VERSION = "@turnkey/http@2.12.2";
;
 //# sourceMappingURL=version.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TurnkeyClient": (()=>TurnkeyClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$version$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/version.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$universal$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/universal.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <locals>");
;
;
;
/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */ class TurnkeyClient {
    constructor(config, stamper){
        /**
         * Get details about an Activity
         *
         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
         *
         * See also {@link stampGetActivity}.
         */ this.getActivity = async (input)=>{
            return this.request("/public/v1/query/get_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivity}.
         */ this.stampGetActivity = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about an API key
         *
         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).
         *
         * See also {@link stampGetApiKey}.
         */ this.getApiKey = async (input)=>{
            return this.request("/public/v1/query/get_api_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKey}.
         */ this.stampGetApiKey = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about API keys for a user
         *
         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).
         *
         * See also {@link stampGetApiKeys}.
         */ this.getApiKeys = async (input)=>{
            return this.request("/public/v1/query/get_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKeys}.
         */ this.stampGetApiKeys = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get the attestation document corresponding to an enclave.
         *
         * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).
         *
         * See also {@link stampGetAttestationDocument}.
         */ this.getAttestationDocument = async (input)=>{
            return this.request("/public/v1/query/get_attestation", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
         *
         * See also {@link GetAttestationDocument}.
         */ this.stampGetAttestationDocument = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_attestation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about an authenticator
         *
         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
         *
         * See also {@link stampGetAuthenticator}.
         */ this.getAuthenticator = async (input)=>{
            return this.request("/public/v1/query/get_authenticator", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticator}.
         */ this.stampGetAuthenticator = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about authenticators for a user
         *
         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
         *
         * See also {@link stampGetAuthenticators}.
         */ this.getAuthenticators = async (input)=>{
            return this.request("/public/v1/query/get_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticators}.
         */ this.stampGetAuthenticators = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about Oauth providers for a user
         *
         * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).
         *
         * See also {@link stampGetOauthProviders}.
         */ this.getOauthProviders = async (input)=>{
            return this.request("/public/v1/query/get_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link GetOauthProviders}.
         */ this.stampGetOauthProviders = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about an Organization
         *
         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
         *
         * See also {@link stampGetOrganization}.
         */ this.getOrganization = async (input)=>{
            return this.request("/public/v1/query/get_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganization}.
         */ this.stampGetOrganization = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get quorum settings and features for an organization
         *
         * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).
         *
         * See also {@link stampGetOrganizationConfigs}.
         */ this.getOrganizationConfigs = async (input)=>{
            return this.request("/public/v1/query/get_organization_configs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganizationConfigs}.
         */ this.stampGetOrganizationConfigs = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization_configs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about a Policy
         *
         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
         *
         * See also {@link stampGetPolicy}.
         */ this.getPolicy = async (input)=>{
            return this.request("/public/v1/query/get_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicy}.
         */ this.stampGetPolicy = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about a Private Key
         *
         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
         *
         * See also {@link stampGetPrivateKey}.
         */ this.getPrivateKey = async (input)=>{
            return this.request("/public/v1/query/get_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKey}.
         */ this.stampGetPrivateKey = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about a User
         *
         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
         *
         * See also {@link stampGetUser}.
         */ this.getUser = async (input)=>{
            return this.request("/public/v1/query/get_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
         *
         * See also {@link GetUser}.
         */ this.stampGetUser = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get details about a Wallet
         *
         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).
         *
         * See also {@link stampGetWallet}.
         */ this.getWallet = async (input)=>{
            return this.request("/public/v1/query/get_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallet}.
         */ this.stampGetWallet = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Activities within an Organization
         *
         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
         *
         * See also {@link stampGetActivities}.
         */ this.getActivities = async (input)=>{
            return this.request("/public/v1/query/list_activities", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivities}.
         */ this.stampGetActivities = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Policies within an Organization
         *
         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
         *
         * See also {@link stampGetPolicies}.
         */ this.getPolicies = async (input)=>{
            return this.request("/public/v1/query/list_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicies}.
         */ this.stampGetPolicies = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Private Key Tags within an Organization
         *
         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).
         *
         * See also {@link stampListPrivateKeyTags}.
         */ this.listPrivateKeyTags = async (input)=>{
            return this.request("/public/v1/query/list_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListPrivateKeyTags}.
         */ this.stampListPrivateKeyTags = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Private Keys within an Organization
         *
         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
         *
         * See also {@link stampGetPrivateKeys}.
         */ this.getPrivateKeys = async (input)=>{
            return this.request("/public/v1/query/list_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKeys}.
         */ this.stampGetPrivateKeys = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get all suborg IDs associated given a parent org ID and an optional filter.
         *
         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).
         *
         * See also {@link stampGetSubOrgIds}.
         */ this.getSubOrgIds = async (input)=>{
            return this.request("/public/v1/query/list_suborgs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
         *
         * See also {@link GetSubOrgIds}.
         */ this.stampGetSubOrgIds = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all User Tags within an Organization
         *
         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).
         *
         * See also {@link stampListUserTags}.
         */ this.listUserTags = async (input)=>{
            return this.request("/public/v1/query/list_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListUserTags}.
         */ this.stampListUserTags = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Users within an Organization
         *
         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
         *
         * See also {@link stampGetUsers}.
         */ this.getUsers = async (input)=>{
            return this.request("/public/v1/query/list_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
         *
         * See also {@link GetUsers}.
         */ this.stampGetUsers = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Accounts wirhin a Wallet
         *
         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).
         *
         * See also {@link stampGetWalletAccounts}.
         */ this.getWalletAccounts = async (input)=>{
            return this.request("/public/v1/query/list_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWalletAccounts}.
         */ this.stampGetWalletAccounts = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * List all Wallets within an Organization
         *
         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).
         *
         * See also {@link stampGetWallets}.
         */ this.getWallets = async (input)=>{
            return this.request("/public/v1/query/list_wallets", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallets}.
         */ this.stampGetWallets = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
         *
         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
         *
         * See also {@link stampGetWhoami}.
         */ this.getWhoami = async (input)=>{
            return this.request("/public/v1/query/whoami", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
         *
         * See also {@link GetWhoami}.
         */ this.stampGetWhoami = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Approve an Activity
         *
         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
         *
         * See also {@link stampApproveActivity}.
         */ this.approveActivity = async (input)=>{
            return this.request("/public/v1/submit/approve_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
         *
         * See also {@link ApproveActivity}.
         */ this.stampApproveActivity = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Add api keys to an existing User
         *
         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
         *
         * See also {@link stampCreateApiKeys}.
         */ this.createApiKeys = async (input)=>{
            return this.request("/public/v1/submit/create_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiKeys}.
         */ this.stampCreateApiKeys = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create API-only Users in an existing Organization
         *
         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
         *
         * See also {@link stampCreateApiOnlyUsers}.
         */ this.createApiOnlyUsers = async (input)=>{
            return this.request("/public/v1/submit/create_api_only_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiOnlyUsers}.
         */ this.stampCreateApiOnlyUsers = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_only_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create Authenticators to authenticate requests to Turnkey
         *
         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
         *
         * See also {@link stampCreateAuthenticators}.
         */ this.createAuthenticators = async (input)=>{
            return this.request("/public/v1/submit/create_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateAuthenticators}.
         */ this.stampCreateAuthenticators = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create Invitations to join an existing Organization
         *
         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
         *
         * See also {@link stampCreateInvitations}.
         */ this.createInvitations = async (input)=>{
            return this.request("/public/v1/submit/create_invitations", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateInvitations}.
         */ this.stampCreateInvitations = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_invitations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Creates Oauth providers for a specified user - BETA
         *
         * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).
         *
         * See also {@link stampCreateOauthProviders}.
         */ this.createOauthProviders = async (input)=>{
            return this.request("/public/v1/submit/create_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateOauthProviders}.
         */ this.stampCreateOauthProviders = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create new Policies
         *
         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).
         *
         * See also {@link stampCreatePolicies}.
         */ this.createPolicies = async (input)=>{
            return this.request("/public/v1/submit/create_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicies}.
         */ this.stampCreatePolicies = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a new Policy
         *
         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
         *
         * See also {@link stampCreatePolicy}.
         */ this.createPolicy = async (input)=>{
            return this.request("/public/v1/submit/create_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicy}.
         */ this.stampCreatePolicy = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a private key tag and add it to private keys.
         *
         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
         *
         * See also {@link stampCreatePrivateKeyTag}.
         */ this.createPrivateKeyTag = async (input)=>{
            return this.request("/public/v1/submit/create_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeyTag}.
         */ this.stampCreatePrivateKeyTag = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create new Private Keys
         *
         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
         *
         * See also {@link stampCreatePrivateKeys}.
         */ this.createPrivateKeys = async (input)=>{
            return this.request("/public/v1/submit/create_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeys}.
         */ this.stampCreatePrivateKeys = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a read only session for a user (valid for 1 hour)
         *
         * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).
         *
         * See also {@link stampCreateReadOnlySession}.
         */ this.createReadOnlySession = async (input)=>{
            return this.request("/public/v1/submit/create_read_only_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadOnlySession}.
         */ this.stampCreateReadOnlySession = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_only_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a read write session for a user
         *
         * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).
         *
         * See also {@link stampCreateReadWriteSession}.
         */ this.createReadWriteSession = async (input)=>{
            return this.request("/public/v1/submit/create_read_write_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadWriteSession}.
         */ this.stampCreateReadWriteSession = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_write_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a new Sub-Organization
         *
         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
         *
         * See also {@link stampCreateSubOrganization}.
         */ this.createSubOrganization = async (input)=>{
            return this.request("/public/v1/submit/create_sub_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link CreateSubOrganization}.
         */ this.stampCreateSubOrganization = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a user tag and add it to users.
         *
         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
         *
         * See also {@link stampCreateUserTag}.
         */ this.createUserTag = async (input)=>{
            return this.request("/public/v1/submit/create_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUserTag}.
         */ this.stampCreateUserTag = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create Users in an existing Organization
         *
         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
         *
         * See also {@link stampCreateUsers}.
         */ this.createUsers = async (input)=>{
            return this.request("/public/v1/submit/create_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUsers}.
         */ this.stampCreateUsers = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Create a Wallet and derive addresses
         *
         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).
         *
         * See also {@link stampCreateWallet}.
         */ this.createWallet = async (input)=>{
            return this.request("/public/v1/submit/create_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWallet}.
         */ this.stampCreateWallet = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Derive additional addresses using an existing wallet
         *
         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).
         *
         * See also {@link stampCreateWalletAccounts}.
         */ this.createWalletAccounts = async (input)=>{
            return this.request("/public/v1/submit/create_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWalletAccounts}.
         */ this.stampCreateWalletAccounts = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Remove api keys from a User
         *
         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
         *
         * See also {@link stampDeleteApiKeys}.
         */ this.deleteApiKeys = async (input)=>{
            return this.request("/public/v1/submit/delete_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteApiKeys}.
         */ this.stampDeleteApiKeys = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Remove authenticators from a User
         *
         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
         *
         * See also {@link stampDeleteAuthenticators}.
         */ this.deleteAuthenticators = async (input)=>{
            return this.request("/public/v1/submit/delete_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteAuthenticators}.
         */ this.stampDeleteAuthenticators = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Delete an existing Invitation
         *
         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).
         *
         * See also {@link stampDeleteInvitation}.
         */ this.deleteInvitation = async (input)=>{
            return this.request("/public/v1/submit/delete_invitation", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteInvitation}.
         */ this.stampDeleteInvitation = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_invitation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Removes Oauth providers for a specified user - BETA
         *
         * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).
         *
         * See also {@link stampDeleteOauthProviders}.
         */ this.deleteOauthProviders = async (input)=>{
            return this.request("/public/v1/submit/delete_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteOauthProviders}.
         */ this.stampDeleteOauthProviders = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Delete an existing Policy
         *
         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
         *
         * See also {@link stampDeletePolicy}.
         */ this.deletePolicy = async (input)=>{
            return this.request("/public/v1/submit/delete_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePolicy}.
         */ this.stampDeletePolicy = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Delete Private Key Tags within an Organization
         *
         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).
         *
         * See also {@link stampDeletePrivateKeyTags}.
         */ this.deletePrivateKeyTags = async (input)=>{
            return this.request("/public/v1/submit/delete_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePrivateKeyTags}.
         */ this.stampDeletePrivateKeyTags = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Delete User Tags within an Organization
         *
         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).
         *
         * See also {@link stampDeleteUserTags}.
         */ this.deleteUserTags = async (input)=>{
            return this.request("/public/v1/submit/delete_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUserTags}.
         */ this.stampDeleteUserTags = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Delete Users within an Organization
         *
         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).
         *
         * See also {@link stampDeleteUsers}.
         */ this.deleteUsers = async (input)=>{
            return this.request("/public/v1/submit/delete_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUsers}.
         */ this.stampDeleteUsers = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Authenticate a user via Email
         *
         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).
         *
         * See also {@link stampEmailAuth}.
         */ this.emailAuth = async (input)=>{
            return this.request("/public/v1/submit/email_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
         *
         * See also {@link EmailAuth}.
         */ this.stampEmailAuth = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/email_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Exports a Private Key
         *
         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).
         *
         * See also {@link stampExportPrivateKey}.
         */ this.exportPrivateKey = async (input)=>{
            return this.request("/public/v1/submit/export_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ExportPrivateKey}.
         */ this.stampExportPrivateKey = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Exports a Wallet
         *
         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).
         *
         * See also {@link stampExportWallet}.
         */ this.exportWallet = async (input)=>{
            return this.request("/public/v1/submit/export_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWallet}.
         */ this.stampExportWallet = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Exports a Wallet Account
         *
         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).
         *
         * See also {@link stampExportWalletAccount}.
         */ this.exportWalletAccount = async (input)=>{
            return this.request("/public/v1/submit/export_wallet_account", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWalletAccount}.
         */ this.stampExportWalletAccount = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Imports a private key
         *
         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).
         *
         * See also {@link stampImportPrivateKey}.
         */ this.importPrivateKey = async (input)=>{
            return this.request("/public/v1/submit/import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ImportPrivateKey}.
         */ this.stampImportPrivateKey = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Imports a wallet
         *
         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).
         *
         * See also {@link stampImportWallet}.
         */ this.importWallet = async (input)=>{
            return this.request("/public/v1/submit/import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ImportWallet}.
         */ this.stampImportWallet = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Initializes a new private key import
         *
         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).
         *
         * See also {@link stampInitImportPrivateKey}.
         */ this.initImportPrivateKey = async (input)=>{
            return this.request("/public/v1/submit/init_import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportPrivateKey}.
         */ this.stampInitImportPrivateKey = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Initializes a new wallet import
         *
         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).
         *
         * See also {@link stampInitImportWallet}.
         */ this.initImportWallet = async (input)=>{
            return this.request("/public/v1/submit/init_import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportWallet}.
         */ this.stampInitImportWallet = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Initializes a new email recovery
         *
         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).
         *
         * See also {@link stampInitUserEmailRecovery}.
         */ this.initUserEmailRecovery = async (input)=>{
            return this.request("/public/v1/submit/init_user_email_recovery", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
         *
         * See also {@link InitUserEmailRecovery}.
         */ this.stampInitUserEmailRecovery = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_user_email_recovery";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Authenticate a user with an Oidc token (Oauth) - BETA
         *
         * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).
         *
         * See also {@link stampOauth}.
         */ this.oauth = async (input)=>{
            return this.request("/public/v1/submit/oauth", input);
        };
        /**
         * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
         *
         * See also {@link Oauth}.
         */ this.stampOauth = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Completes the process of recovering a user by adding an authenticator
         *
         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).
         *
         * See also {@link stampRecoverUser}.
         */ this.recoverUser = async (input)=>{
            return this.request("/public/v1/submit/recover_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
         *
         * See also {@link RecoverUser}.
         */ this.stampRecoverUser = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/recover_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Reject an Activity
         *
         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
         *
         * See also {@link stampRejectActivity}.
         */ this.rejectActivity = async (input)=>{
            return this.request("/public/v1/submit/reject_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
         *
         * See also {@link RejectActivity}.
         */ this.stampRejectActivity = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Removes an organization feature
         *
         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).
         *
         * See also {@link stampRemoveOrganizationFeature}.
         */ this.removeOrganizationFeature = async (input)=>{
            return this.request("/public/v1/submit/remove_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link RemoveOrganizationFeature}.
         */ this.stampRemoveOrganizationFeature = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/remove_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Sets an organization feature
         *
         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).
         *
         * See also {@link stampSetOrganizationFeature}.
         */ this.setOrganizationFeature = async (input)=>{
            return this.request("/public/v1/submit/set_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link SetOrganizationFeature}.
         */ this.stampSetOrganizationFeature = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/set_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Sign a raw payload
         *
         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
         *
         * See also {@link stampSignRawPayload}.
         */ this.signRawPayload = async (input)=>{
            return this.request("/public/v1/submit/sign_raw_payload", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayload}.
         */ this.stampSignRawPayload = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Sign multiple raw payloads with the same signing parameters
         *
         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).
         *
         * See also {@link stampSignRawPayloads}.
         */ this.signRawPayloads = async (input)=>{
            return this.request("/public/v1/submit/sign_raw_payloads", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayloads}.
         */ this.stampSignRawPayloads = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payloads";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Sign a transaction
         *
         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
         *
         * See also {@link stampSignTransaction}.
         */ this.signTransaction = async (input)=>{
            return this.request("/public/v1/submit/sign_transaction", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
         *
         * See also {@link SignTransaction}.
         */ this.stampSignTransaction = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Update an existing Policy
         *
         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
         *
         * See also {@link stampUpdatePolicy}.
         */ this.updatePolicy = async (input)=>{
            return this.request("/public/v1/submit/update_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePolicy}.
         */ this.stampUpdatePolicy = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
         *
         * See also {@link stampUpdatePrivateKeyTag}.
         */ this.updatePrivateKeyTag = async (input)=>{
            return this.request("/public/v1/submit/update_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePrivateKeyTag}.
         */ this.stampUpdatePrivateKeyTag = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
         *
         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
         *
         * See also {@link stampUpdateRootQuorum}.
         */ this.updateRootQuorum = async (input)=>{
            return this.request("/public/v1/submit/update_root_quorum", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateRootQuorum}.
         */ this.stampUpdateRootQuorum = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_root_quorum";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Update a User in an existing Organization
         *
         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
         *
         * See also {@link stampUpdateUser}.
         */ this.updateUser = async (input)=>{
            return this.request("/public/v1/submit/update_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUser}.
         */ this.stampUpdateUser = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        /**
         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
         *
         * See also {@link stampUpdateUserTag}.
         */ this.updateUserTag = async (input)=>{
            return this.request("/public/v1/submit/update_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserTag}.
         */ this.stampUpdateUserTag = async (input)=>{
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl
            };
        };
        if (!config.baseUrl) {
            throw new Error(`Missing base URL. Please verify env vars.`);
        }
        this.config = config;
        this.stamper = stamper;
    }
    async request(url, body) {
        const fullUrl = this.config.baseUrl + url;
        const stringifiedBody = JSON.stringify(body);
        const stamp = await this.stamper.stamp(stringifiedBody);
        const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$universal$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fetch"])(fullUrl, {
            method: "POST",
            headers: {
                [stamp.stampHeaderName]: stamp.stampHeaderValue,
                "X-Client-Version": __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$version$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VERSION"]
            },
            body: stringifiedBody,
            redirect: "follow"
        });
        if (!response.ok) {
            let res;
            try {
                res = await response.json();
            } catch (_) {
                throw new Error(`${response.status} ${response.statusText}`);
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["TurnkeyRequestError"](res);
        }
        const data = await response.json();
        return data;
    }
}
;
 //# sourceMappingURL=public_api.client.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/shared.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TurnkeyActivityError": (()=>TurnkeyActivityError)
});
class TurnkeyActivityError extends Error {
    constructor(input){
        const { message, cause, activityId, activityStatus, activityType } = input;
        super(message);
        this.name = "TurnkeyActivityError";
        this.activityId = activityId ?? null;
        this.activityStatus = activityStatus ?? null;
        this.activityType = activityType ?? null;
        this.cause = cause ?? null;
    }
}
;
 //# sourceMappingURL=shared.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/async.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createActivityPoller": (()=>createActivityPoller),
    "withAsyncPolling": (()=>withAsyncPolling)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$fetcher$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/shared.mjs [app-client] (ecmascript)");
;
;
const DEFAULT_REFRESH_INTERVAL_MS = 500;
/**
 * Wraps a request to create a fetcher with built-in async polling support.
 *
 * @deprecated this function only works with {@link TurnkeyApi}.
 * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.
 */ function withAsyncPolling(params) {
    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;
    return async (input)=>{
        const initialResponse = await request(input);
        let activity = initialResponse.activity;
        while(true){
            switch(activity.status){
                case "ACTIVITY_STATUS_COMPLETED":
                    {
                        return activity;
                    }
                case "ACTIVITY_STATUS_CREATED":
                    {
                        break;
                    }
                case "ACTIVITY_STATUS_PENDING":
                    {
                        break;
                    }
                case "ACTIVITY_STATUS_CONSENSUS_NEEDED":
                    {
                        // If the activity requires consensus, we shouldn't be polling forever.
                        // You can read the `TurnkeyActivityError` thrown to get the `activityId`,
                        // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`
                        // when the required approvals/rejections are in place.
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Consensus needed for activity ${activity.id}`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                case "ACTIVITY_STATUS_FAILED":
                    {
                        // Activity failed
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Activity ${activity.id} failed`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                case "ACTIVITY_STATUS_REJECTED":
                    {
                        // Activity was rejected
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Activity ${activity.id} was rejected`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                default:
                    {
                        // Make sure the switch block is exhaustive
                        assertNever(activity.status);
                    }
            }
            await sleep(refreshIntervalMs);
            const pollingResponse = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$fetcher$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getActivity"])({
                body: {
                    activityId: activity.id,
                    organizationId: activity.organizationId
                }
            });
            activity = pollingResponse.activity;
        }
    };
}
/**
 * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.
 * The default refresh interval is 500ms.
 *
 * The returned poller will poll until the activity becomes `COMPLETED`.
 * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.
 *
 * @example
 * const activityPoller = createActivityPoller(client, client.createPrivateKeys);
 * const activity = await activityPoller(input);
 * console.log(activity.result); // activity is completed
 */ function createActivityPoller(params) {
    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;
    return async (input)=>{
        const initialResponse = await requestFn(input);
        let activity = initialResponse.activity;
        while(true){
            switch(activity.status){
                case "ACTIVITY_STATUS_COMPLETED":
                    {
                        return activity;
                    }
                case "ACTIVITY_STATUS_CREATED":
                    {
                        break;
                    }
                case "ACTIVITY_STATUS_PENDING":
                    {
                        break;
                    }
                case "ACTIVITY_STATUS_CONSENSUS_NEEDED":
                    {
                        // If the activity requires consensus, we shouldn't be polling forever.
                        // You can read the `TurnkeyActivityError` thrown to get the `activityId`,
                        // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`
                        // when the required approvals/rejections are in place.
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Consensus needed for activity ${activity.id}`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                case "ACTIVITY_STATUS_FAILED":
                    {
                        // Activity failed
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Activity ${activity.id} failed`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                case "ACTIVITY_STATUS_REJECTED":
                    {
                        // Activity was rejected
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TurnkeyActivityError"]({
                            message: `Activity ${activity.id} was rejected`,
                            activityId: activity.id,
                            activityStatus: activity.status,
                            activityType: activity.type
                        });
                    }
                default:
                    {
                        // Make sure the switch block is exhaustive
                        assertNever(activity.status);
                    }
            }
            await sleep(refreshIntervalMs);
            const pollingResponse = await client.getActivity({
                activityId: activity.id,
                organizationId: activity.organizationId
            });
            activity = pollingResponse.activity;
        }
    };
}
function sleep(ms) {
    return new Promise((resolve)=>{
        setTimeout(()=>{
            resolve();
        }, ms);
    });
}
function assertNever(input, message) {
    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);
}
;
 //# sourceMappingURL=async.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/index.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PublicApiService": (()=>PublicApiService)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$fetcher$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * @deprecated use `TurnkeyApi` instead
 */ const PublicApiService = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$fetcher$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@turnkey/http/dist/index.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$fetcher$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$_$5f$generated_$5f2f$services$2f$coordinator$2f$public$2f$v1$2f$public_api$2e$client$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$config$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/config.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$base$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/base.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$shared$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/shared.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/webauthn.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$async$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/async.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$version$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/version.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$http$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@turnkey/http/dist/index.mjs [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_%40turnkey_http_dist_84422e._.js.map